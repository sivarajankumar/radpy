#summary How to contribute to the development of RadPy.
#labels Phase-Implementation

= Introduction =

There are several ways to help out with the development of RadPy.


==Unit Tests==

Unit testing is the automated validation of software results.  This is very important as small changes to code can cause errors in data analysis routines that may go undetected.  RadPy uses the Python [http://docs.python.org/library/unittest.html unittest] module.  The RFBTest.py module in the radpy/src/plugins/BeamAnalysis/view/RFB directory is an example.

Any code that modifies or analyzes data should have a unit test.  Eventually a unit testing framework for the entire RadPy suite will be created.  Unit tests for individual plugins or modules should tie into this framework.

==Fixing Bugs/Adding Features==

Any patches that add features or fix bugs are always welcome.  The [http://code.google.com/p/radpy/issues/list Issues list] is a good place to start to find areas that need improvement.  To submit a patch, you must first create a patch file.  There are several utilities that can create a patch file, but the easiest way is probably to use your subversion client.  For example, with TortoiseSVN you can right click on the top level of your RadPy source directory and go to 'TortoiseSVN/Create patch...'.  This file can then be uploaded to the Google code issue tracker.  Once your patch has been evaluated by a project developer, it may be committed into the source repository.

==Becoming a Core Developer==

Once you have been an active developer for some time and have demonstrated an ability to generate top quality patches, you can be accepted as a core developer.  This will give you the ability to make changes directly to the RadPy source tree.

==Developing Plugins==

The core RadPy application contains mostly GUI code.  At heart, it is an attempt to make writing plugins for the Enthought workbench application easier for non-programmers.  The code to accomplish actual medical physics tasks is meant to come from plugins.  As such, developing new plugins or improving existing plugins for RadPy is probably the most important thing you can do to help the RadPy effort.  The RadPy Plugin Guide (coming soon!) is the best place to start.  